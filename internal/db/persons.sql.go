// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: persons.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPerson = `-- name: CreatePerson :one
insert into persons (full_name, email, avatar, location, metadata)
values ($1, $2, $3, $4, $5) returning id, full_name, email, avatar, location, metadata, created_at
`

type CreatePersonParams struct {
	FullName string
	Email    string
	Avatar   string
	Location string
	Metadata []byte
}

func (q *Queries) CreatePerson(ctx context.Context, arg CreatePersonParams) (Person, error) {
	row := q.db.QueryRow(ctx, createPerson,
		arg.FullName,
		arg.Email,
		arg.Avatar,
		arg.Location,
		arg.Metadata,
	)
	var i Person
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Avatar,
		&i.Location,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const personByEmail = `-- name: PersonByEmail :one
select id, full_name, avatar, "location", metadata from persons where email = $1
`

type PersonByEmailRow struct {
	ID       uuid.UUID
	FullName string
	Avatar   string
	Location string
	Metadata []byte
}

func (q *Queries) PersonByEmail(ctx context.Context, email string) (PersonByEmailRow, error) {
	row := q.db.QueryRow(ctx, personByEmail, email)
	var i PersonByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Avatar,
		&i.Location,
		&i.Metadata,
	)
	return i, err
}

const popularPersons = `-- name: PopularPersons :many
select persons.full_name, persons.avatar, persons.location, persons_ranking.search_count
from persons_ranking
join persons on persons_ranking.person_id = persons.id
order by persons_ranking.search_count desc
limit 10
`

type PopularPersonsRow struct {
	FullName    string
	Avatar      string
	Location    string
	SearchCount int32
}

func (q *Queries) PopularPersons(ctx context.Context) ([]PopularPersonsRow, error) {
	rows, err := q.db.Query(ctx, popularPersons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PopularPersonsRow
	for rows.Next() {
		var i PopularPersonsRow
		if err := rows.Scan(
			&i.FullName,
			&i.Avatar,
			&i.Location,
			&i.SearchCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const somoeShow = `-- name: SomoeShow :many
select id, full_name, email, avatar, location, metadata, created_at from persons
`

func (q *Queries) SomoeShow(ctx context.Context) ([]Person, error) {
	rows, err := q.db.Query(ctx, somoeShow)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Person
	for rows.Next() {
		var i Person
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Avatar,
			&i.Location,
			&i.Metadata,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePersonRanking = `-- name: UpdatePersonRanking :one
select update_person_ranking($1)
`

func (q *Queries) UpdatePersonRanking(ctx context.Context, pid uuid.UUID) (int32, error) {
	row := q.db.QueryRow(ctx, updatePersonRanking, pid)
	var update_person_ranking int32
	err := row.Scan(&update_person_ranking)
	return update_person_ranking, err
}
